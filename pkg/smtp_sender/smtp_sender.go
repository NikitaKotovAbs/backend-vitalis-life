package smtp_sender

import (
	"backend/pkg/logger"
	"backend/pkg/templates"
	"crypto/tls"
	"fmt"
	"go.uber.org/zap"
	"gopkg.in/gomail.v2"
	"os"
	"strconv"
)

// SMTPConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP
type SMTPConfig struct {
	Host     string
	Port     int
	User     string
	Password string
}

// GetSMTPConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SMTP –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
func GetSMTPConfig() (*SMTPConfig, error) {
	smtpHost := os.Getenv("SMTP_HOST")
	smtpPort := os.Getenv("SMTP_PORT")
	smtpUser := os.Getenv("SMTP_USER")
	smtpPass := os.Getenv("SMTP_PASSWORD")

	if smtpHost == "" || smtpPort == "" || smtpUser == "" || smtpPass == "" {
		return nil, fmt.Errorf("SMTP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã")
	}

	port, err := strconv.Atoi(smtpPort)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç SMTP: %v", err)
	}

	return &SMTPConfig{
		Host:     smtpHost,
		Port:     port,
		User:     smtpUser,
		Password: smtpPass,
	}, nil
}

// createDialer —Å–æ–∑–¥–∞–µ—Ç SMTP dialer
func createDialer(config *SMTPConfig) *gomail.Dialer {
	d := gomail.NewDialer(config.Host, config.Port, config.User, config.Password)
	d.TLSConfig = &tls.Config{InsecureSkipVerify: true}
	return d
}

// SendEmail –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
func SendEmail(to, subject, body string, isHTML bool) error {
	config, err := GetSMTPConfig()
	if err != nil {
		logger.Debug("–Ω–µ –∑–∞–¥–∞–Ω—ã SMTP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", zap.Error(err))
		return err
	}

	m := gomail.NewMessage()
	m.SetHeader("From", config.User)
	m.SetHeader("To", to)
	m.SetHeader("Subject", subject)

	if isHTML {
		m.SetBody("text/html", body)
	} else {
		m.SetBody("text/plain", body)
	}

	d := createDialer(config)
	if err := d.DialAndSend(m); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email", zap.Error(err))
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: %v", err)
	}

	logger.Info("Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ", zap.String("to", to))
	return nil
}

// SendReceiptToCustomer –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ–∫ –∫–ª–∏–µ–Ω—Ç—É
func SendReceiptToCustomer(order templates.OrderData) error {
	config, err := GetSMTPConfig()
	if err != nil {
		return err
	}

	htmlBody := templates.GenerateReceiptHTML(order)

	m := gomail.NewMessage()
	m.SetHeader("From", config.User)
	m.SetHeader("To", order.Email)
	m.SetHeader("Subject", "–í–∞—à –∑–∞–∫–∞–∑ –∏ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ - Vitalis Life")
	m.SetBody("text/html", htmlBody)

	d := createDialer(config)
	if err := d.DialAndSend(m); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞", zap.Error(err))
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞: %v", err)
	}

	logger.Info("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ", zap.String("email", order.Email))
	return nil
}

// SendOrderToManager –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É
func SendOrderToManager(order templates.OrderData, managerEmail string) error {
	config, err := GetSMTPConfig()
	if err != nil {
		return err
	}

	htmlBody := templates.GenerateManagerOrderHTML(order)

	m := gomail.NewMessage()
	m.SetHeader("From", config.User)
	m.SetHeader("To", managerEmail)
	m.SetHeader("Subject", fmt.Sprintf("üéØ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #%s", order.PaymentID))
	m.SetBody("text/html", htmlBody)

	d := createDialer(config)
	if err := d.DialAndSend(m); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É", zap.Error(err))
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É: %v", err)
	}

	logger.Info("–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É", zap.String("manager_email", managerEmail))
	return nil
}

// SendOrderEmails —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–æ–∏—Ö –ø–∏—Å–µ–º
func SendOrderEmails(order templates.OrderData, managerEmail string) error {
	if err := SendReceiptToCustomer(order); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç—É", zap.Error(err))
		return err
	}

	if err := SendOrderToManager(order, managerEmail); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É", zap.Error(err))
		return err
	}

	return nil
}