package smtp_sender

import (
	"backend/pkg/logger"
	"crypto/tls"
	"fmt"
	"go.uber.org/zap"
	"os"
	"strconv"
	"gopkg.in/gomail.v2"
)

// –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
func SendEmail(to, subject, body string, isHTML bool) error {
	smtpHost := os.Getenv("SMTP_HOST")
	smtpPort := os.Getenv("SMTP_PORT")
	smtpUser := os.Getenv("SMTP_USER")
	smtpPass := os.Getenv("SMTP_PASSWORD")

	if smtpHost == "" || smtpPort == "" || smtpUser == "" || smtpPass == "" {
		logger.Debug("–Ω–µ –∑–∞–¥–∞–Ω—ã SMTP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
			zap.String("SMTP_HOST", smtpHost),
			zap.String("SMTP_PORT", smtpPort),
			zap.String("SMTP_USER", smtpUser),
			zap.String("SMTP_PASSWORD", smtpPass),
		)
		return fmt.Errorf("–Ω–µ –∑–∞–¥–∞–Ω—ã SMTP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
	}

	port, err := strconv.Atoi(smtpPort)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞", zap.Error(err))
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞: %v", err)
	}

	m := gomail.NewMessage()
	m.SetHeader("From", smtpUser)
	m.SetHeader("To", to)
	m.SetHeader("Subject", subject)
	
	if isHTML {
		m.SetBody("text/html", body)
	} else {
		m.SetBody("text/plain", body)
	}

	d := gomail.NewDialer(smtpHost, port, smtpUser, smtpPass)
	d.TLSConfig = &tls.Config{InsecureSkipVerify: true}

	if err := d.DialAndSend(m); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email", zap.Error(err))
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: %v", err)
	}

	logger.Info("Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ", zap.String("to", to))
	return nil
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
type OrderData struct {
	CustomerName    string
	Email           string
	Phone           string
	DeliveryType    string
	DeliveryAddress string
	Comment         string
	PaymentID       string
	Amount          string
	Currency        string
	Description     string
	CartItems       string // JSON —Å—Ç—Ä–æ–∫–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç—É
func SendReceiptToCustomer(order OrderData) error {
	subject := "–í–∞—à –∑–∞–∫–∞–∑ –∏ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ - Vitalis Life"

	htmlBody := fmt.Sprintf(`
	<!DOCTYPE html>
	<html>
	<head>
		<meta charset="UTF-8">
		<style>
			body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
			.header { background: #4CAF50; color: white; padding: 20px; text-align: center; border-radius: 5px; }
			.content { background: #f9f9f9; padding: 20px; margin: 20px 0; border-radius: 5px; }
			.footer { text-align: center; color: #666; font-size: 12px; margin-top: 20px; }
			.info-item { margin: 10px 0; }
			.info-label { font-weight: bold; color: #555; }
		</style>
	</head>
	<body>
		<div class="header">
			<h1>Vitalis Life</h1>
			<h2>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!</h2>
		</div>
		
		<div class="content">
			<p>–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) <strong>%s</strong>,</p>
			<p>–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</p>
			
			<div class="info-item">
				<span class="info-label">ID –ø–ª–∞—Ç–µ–∂–∞:</span> %s
			</div>
			<div class="info-item">
				<span class="info-label">–°—É–º–º–∞:</span> %s %s
			</div>
			<div class="info-item">
				<span class="info-label">–û–ø–∏—Å–∞–Ω–∏–µ:</span> %s
			</div>
			
			<h3>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
			<div class="info-item">
				<span class="info-label">Email:</span> %s
			</div>
			<div class="info-item">
				<span class="info-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span> %s
			</div>
			<div class="info-item">
				<span class="info-label">–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</span> %s
			</div>
			<div class="info-item">
				<span class="info-label">–ê–¥—Ä–µ—Å:</span> %s
			</div>
			<div class="info-item">
				<span class="info-label">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</span> %s
			</div>
		</div>
		
		<div class="footer">
			<p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ Vitalis Life</p>
			<p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: support@vitalis-life.ru</p>
		</div>
	</body>
	</html>
	`, order.CustomerName, order.PaymentID, order.Amount, order.Currency, 
	   order.Description, order.Email, order.Phone, order.DeliveryType, 
	   order.DeliveryAddress, order.Comment)

	return SendEmail(order.Email, subject, htmlBody, true)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
func SendOrderToManager(order OrderData, managerEmail string) error {
	subject := fmt.Sprintf("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #%s - Vitalis Life", order.PaymentID)

	// –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ JSON (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
	var cartItemsInfo string
	if order.CartItems != "" {
		cartItemsInfo = "–¢–æ–≤–∞—Ä—ã:\n" + order.CartItems
	} else {
		cartItemsInfo = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
	}

	htmlBody := fmt.Sprintf(`
	<!DOCTYPE html>
	<html>
	<head>
		<meta charset="UTF-8">
		<style>
			body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
			.header { background: #ff6b35; color: white; padding: 20px; text-align: center; border-radius: 5px; }
			.content { background: #fff3cd; padding: 20px; margin: 20px 0; border-radius: 5px; border: 1px solid #ffeaa7; }
			.urgent { color: #d63031; font-weight: bold; }
			.info-item { margin: 10px 0; padding: 8px; background: #f8f9fa; border-radius: 3px; }
			.info-label { font-weight: bold; color: #2d3436; }
		</style>
	</head>
	<body>
		<div class="header">
			<h1>Vitalis Life</h1>
			<h2>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</h2>
		</div>
		
		<div class="content">
			<p class="urgent">üí° –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞</p>
			
			<div class="info-item">
				<span class="info-label">ID –∑–∞–∫–∞–∑–∞:</span> %s
			</div>
			<div class="info-item">
				<span class="info-label">–°—É–º–º–∞:</span> %s %s
			</div>
			<div class="info-item">
				<span class="info-label">–ö–ª–∏–µ–Ω—Ç:</span> %s
			</div>
			<div class="info-item">
				<span class="info-label">Email:</span> %s
			</div>
			<div class="info-item">
				<span class="info-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span> %s
			</div>
			<div class="info-item">
				<span class="info-label">–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</span> %s
			</div>
			<div class="info-item">
				<span class="info-label">–ê–¥—Ä–µ—Å:</span> %s
			</div>
			<div class="info-item">
				<span class="info-label">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞:</span> %s
			</div>
			<div class="info-item">
				<span class="info-label">–¢–æ–≤–∞—Ä—ã:</span><br>
				<pre>%s</pre>
			</div>
		</div>
		
		<p><strong>–í—Ä–µ–º—è —Å–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞:</strong> –ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!</p>
	</body>
	</html>
	`, order.PaymentID, order.Amount, order.Currency, order.CustomerName, 
	   order.Email, order.Phone, order.DeliveryType, order.DeliveryAddress, 
	   order.Comment, cartItemsInfo)

	return SendEmail(managerEmail, subject, htmlBody, true)
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–æ–∏—Ö –ø–∏—Å–µ–º
func SendOrderEmails(order OrderData, managerEmail string) error {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –∫–ª–∏–µ–Ω—Ç—É
	if err := SendReceiptToCustomer(order); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –∫–ª–∏–µ–Ω—Ç—É", zap.Error(err))
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É
	if err := SendOrderToManager(order, managerEmail); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É", zap.Error(err))
		return err
	}

	return nil
}